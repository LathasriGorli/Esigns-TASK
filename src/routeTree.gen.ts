/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SentDocumentRouteImport } from './routes/sent-document'
import { Route as DocumentRecipientRouteImport } from './routes/document-recipient'
import { Route as TemplateRouteImport } from './routes/_template'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthCallbackRouteImport } from './routes/auth/callback'
import { Route as TemplateTemplateIdRouteImport } from './routes/_template/template/$id'

const SentDocumentRoute = SentDocumentRouteImport.update({
  id: '/sent-document',
  path: '/sent-document',
  getParentRoute: () => rootRouteImport,
} as any)
const DocumentRecipientRoute = DocumentRecipientRouteImport.update({
  id: '/document-recipient',
  path: '/document-recipient',
  getParentRoute: () => rootRouteImport,
} as any)
const TemplateRoute = TemplateRouteImport.update({
  id: '/_template',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthCallbackRoute = AuthCallbackRouteImport.update({
  id: '/auth/callback',
  path: '/auth/callback',
  getParentRoute: () => rootRouteImport,
} as any)
const TemplateTemplateIdRoute = TemplateTemplateIdRouteImport.update({
  id: '/template/$id',
  path: '/template/$id',
  getParentRoute: () => TemplateRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/document-recipient': typeof DocumentRecipientRoute
  '/sent-document': typeof SentDocumentRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/template/$id': typeof TemplateTemplateIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/document-recipient': typeof DocumentRecipientRoute
  '/sent-document': typeof SentDocumentRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/template/$id': typeof TemplateTemplateIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_template': typeof TemplateRouteWithChildren
  '/document-recipient': typeof DocumentRecipientRoute
  '/sent-document': typeof SentDocumentRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/_template/template/$id': typeof TemplateTemplateIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/document-recipient'
    | '/sent-document'
    | '/auth/callback'
    | '/template/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/document-recipient'
    | '/sent-document'
    | '/auth/callback'
    | '/template/$id'
  id:
    | '__root__'
    | '/'
    | '/_template'
    | '/document-recipient'
    | '/sent-document'
    | '/auth/callback'
    | '/_template/template/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  TemplateRoute: typeof TemplateRouteWithChildren
  DocumentRecipientRoute: typeof DocumentRecipientRoute
  SentDocumentRoute: typeof SentDocumentRoute
  AuthCallbackRoute: typeof AuthCallbackRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sent-document': {
      id: '/sent-document'
      path: '/sent-document'
      fullPath: '/sent-document'
      preLoaderRoute: typeof SentDocumentRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/document-recipient': {
      id: '/document-recipient'
      path: '/document-recipient'
      fullPath: '/document-recipient'
      preLoaderRoute: typeof DocumentRecipientRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_template': {
      id: '/_template'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof TemplateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/callback': {
      id: '/auth/callback'
      path: '/auth/callback'
      fullPath: '/auth/callback'
      preLoaderRoute: typeof AuthCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_template/template/$id': {
      id: '/_template/template/$id'
      path: '/template/$id'
      fullPath: '/template/$id'
      preLoaderRoute: typeof TemplateTemplateIdRouteImport
      parentRoute: typeof TemplateRoute
    }
  }
}

interface TemplateRouteChildren {
  TemplateTemplateIdRoute: typeof TemplateTemplateIdRoute
}

const TemplateRouteChildren: TemplateRouteChildren = {
  TemplateTemplateIdRoute: TemplateTemplateIdRoute,
}

const TemplateRouteWithChildren = TemplateRoute._addFileChildren(
  TemplateRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TemplateRoute: TemplateRouteWithChildren,
  DocumentRecipientRoute: DocumentRecipientRoute,
  SentDocumentRoute: SentDocumentRoute,
  AuthCallbackRoute: AuthCallbackRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
